{"ast":null,"code":"import { encode as base64url } from '../../runtime/base64url.js';\nimport encrypt from '../../runtime/encrypt.js';\nimport { deflate } from '../../runtime/zlib.js';\nimport generateIv from '../../lib/iv.js';\nimport encryptKeyManagement from '../../lib/encrypt_key_management.js';\nimport { JOSENotSupported, JWEInvalid } from '../../util/errors.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport { encoder, decoder, concat } from '../../lib/buffer_utils.js';\nimport validateCrit from '../../lib/validate_crit.js';\nexport const unprotected = Symbol();\nexport class FlattenedEncrypt {\n  constructor(plaintext) {\n    if (!(plaintext instanceof Uint8Array)) {\n      throw new TypeError('plaintext must be an instance of Uint8Array');\n    }\n\n    this._plaintext = plaintext;\n  }\n\n  setKeyManagementParameters(parameters) {\n    if (this._keyManagementParameters) {\n      throw new TypeError('setKeyManagementParameters can only be called once');\n    }\n\n    this._keyManagementParameters = parameters;\n    return this;\n  }\n\n  setProtectedHeader(protectedHeader) {\n    if (this._protectedHeader) {\n      throw new TypeError('setProtectedHeader can only be called once');\n    }\n\n    this._protectedHeader = protectedHeader;\n    return this;\n  }\n\n  setSharedUnprotectedHeader(sharedUnprotectedHeader) {\n    if (this._sharedUnprotectedHeader) {\n      throw new TypeError('setSharedUnprotectedHeader can only be called once');\n    }\n\n    this._sharedUnprotectedHeader = sharedUnprotectedHeader;\n    return this;\n  }\n\n  setUnprotectedHeader(unprotectedHeader) {\n    if (this._unprotectedHeader) {\n      throw new TypeError('setUnprotectedHeader can only be called once');\n    }\n\n    this._unprotectedHeader = unprotectedHeader;\n    return this;\n  }\n\n  setAdditionalAuthenticatedData(aad) {\n    this._aad = aad;\n    return this;\n  }\n\n  setContentEncryptionKey(cek) {\n    if (this._cek) {\n      throw new TypeError('setContentEncryptionKey can only be called once');\n    }\n\n    this._cek = cek;\n    return this;\n  }\n\n  setInitializationVector(iv) {\n    if (this._iv) {\n      throw new TypeError('setInitializationVector can only be called once');\n    }\n\n    this._iv = iv;\n    return this;\n  }\n\n  async encrypt(key, options) {\n    if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {\n      throw new JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');\n    }\n\n    if (!isDisjoint(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {\n      throw new JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');\n    }\n\n    const joseHeader = { ...this._protectedHeader,\n      ...this._unprotectedHeader,\n      ...this._sharedUnprotectedHeader\n    };\n    validateCrit(JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);\n\n    if (joseHeader.zip !== undefined) {\n      if (!this._protectedHeader || !this._protectedHeader.zip) {\n        throw new JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n      }\n\n      if (joseHeader.zip !== 'DEF') {\n        throw new JOSENotSupported('Unsupported JWE \"zip\" (Compression Algorithm) Header Parameter value');\n      }\n    }\n\n    const {\n      alg,\n      enc\n    } = joseHeader;\n\n    if (typeof alg !== 'string' || !alg) {\n      throw new JWEInvalid('JWE \"alg\" (Algorithm) Header Parameter missing or invalid');\n    }\n\n    if (typeof enc !== 'string' || !enc) {\n      throw new JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter missing or invalid');\n    }\n\n    let encryptedKey;\n\n    if (alg === 'dir') {\n      if (this._cek) {\n        throw new TypeError('setContentEncryptionKey cannot be called when using Direct Encryption');\n      }\n    } else if (alg === 'ECDH-ES') {\n      if (this._cek) {\n        throw new TypeError('setContentEncryptionKey cannot be called when using Direct Key Agreement');\n      }\n    }\n\n    let cek;\n    {\n      let parameters;\n      ({\n        cek,\n        encryptedKey,\n        parameters\n      } = await encryptKeyManagement(alg, enc, key, this._cek, this._keyManagementParameters));\n\n      if (parameters) {\n        if (options && unprotected in options) {\n          if (!this._unprotectedHeader) {\n            this.setUnprotectedHeader(parameters);\n          } else {\n            this._unprotectedHeader = { ...this._unprotectedHeader,\n              ...parameters\n            };\n          }\n        } else {\n          if (!this._protectedHeader) {\n            this.setProtectedHeader(parameters);\n          } else {\n            this._protectedHeader = { ...this._protectedHeader,\n              ...parameters\n            };\n          }\n        }\n      }\n    }\n    this._iv || (this._iv = generateIv(enc));\n    let additionalData;\n    let protectedHeader;\n    let aadMember;\n\n    if (this._protectedHeader) {\n      protectedHeader = encoder.encode(base64url(JSON.stringify(this._protectedHeader)));\n    } else {\n      protectedHeader = encoder.encode('');\n    }\n\n    if (this._aad) {\n      aadMember = base64url(this._aad);\n      additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(aadMember));\n    } else {\n      additionalData = protectedHeader;\n    }\n\n    let ciphertext;\n    let tag;\n\n    if (joseHeader.zip === 'DEF') {\n      const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || deflate)(this._plaintext);\n      ({\n        ciphertext,\n        tag\n      } = await encrypt(enc, deflated, cek, this._iv, additionalData));\n    } else {\n      ;\n      ({\n        ciphertext,\n        tag\n      } = await encrypt(enc, this._plaintext, cek, this._iv, additionalData));\n    }\n\n    const jwe = {\n      ciphertext: base64url(ciphertext),\n      iv: base64url(this._iv),\n      tag: base64url(tag)\n    };\n\n    if (encryptedKey) {\n      jwe.encrypted_key = base64url(encryptedKey);\n    }\n\n    if (aadMember) {\n      jwe.aad = aadMember;\n    }\n\n    if (this._protectedHeader) {\n      jwe.protected = decoder.decode(protectedHeader);\n    }\n\n    if (this._sharedUnprotectedHeader) {\n      jwe.unprotected = this._sharedUnprotectedHeader;\n    }\n\n    if (this._unprotectedHeader) {\n      jwe.header = this._unprotectedHeader;\n    }\n\n    return jwe;\n  }\n\n}","map":{"version":3,"names":["encode","base64url","encrypt","deflate","generateIv","encryptKeyManagement","JOSENotSupported","JWEInvalid","isDisjoint","encoder","decoder","concat","validateCrit","unprotected","Symbol","FlattenedEncrypt","constructor","plaintext","Uint8Array","TypeError","_plaintext","setKeyManagementParameters","parameters","_keyManagementParameters","setProtectedHeader","protectedHeader","_protectedHeader","setSharedUnprotectedHeader","sharedUnprotectedHeader","_sharedUnprotectedHeader","setUnprotectedHeader","unprotectedHeader","_unprotectedHeader","setAdditionalAuthenticatedData","aad","_aad","setContentEncryptionKey","cek","_cek","setInitializationVector","iv","_iv","key","options","joseHeader","Map","crit","zip","undefined","alg","enc","encryptedKey","additionalData","aadMember","JSON","stringify","ciphertext","tag","deflated","deflateRaw","jwe","encrypted_key","protected","decode","header"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/jwe/flattened/encrypt.js"],"sourcesContent":["import { encode as base64url } from '../../runtime/base64url.js';\nimport encrypt from '../../runtime/encrypt.js';\nimport { deflate } from '../../runtime/zlib.js';\nimport generateIv from '../../lib/iv.js';\nimport encryptKeyManagement from '../../lib/encrypt_key_management.js';\nimport { JOSENotSupported, JWEInvalid } from '../../util/errors.js';\nimport isDisjoint from '../../lib/is_disjoint.js';\nimport { encoder, decoder, concat } from '../../lib/buffer_utils.js';\nimport validateCrit from '../../lib/validate_crit.js';\nexport const unprotected = Symbol();\nexport class FlattenedEncrypt {\n    constructor(plaintext) {\n        if (!(plaintext instanceof Uint8Array)) {\n            throw new TypeError('plaintext must be an instance of Uint8Array');\n        }\n        this._plaintext = plaintext;\n    }\n    setKeyManagementParameters(parameters) {\n        if (this._keyManagementParameters) {\n            throw new TypeError('setKeyManagementParameters can only be called once');\n        }\n        this._keyManagementParameters = parameters;\n        return this;\n    }\n    setProtectedHeader(protectedHeader) {\n        if (this._protectedHeader) {\n            throw new TypeError('setProtectedHeader can only be called once');\n        }\n        this._protectedHeader = protectedHeader;\n        return this;\n    }\n    setSharedUnprotectedHeader(sharedUnprotectedHeader) {\n        if (this._sharedUnprotectedHeader) {\n            throw new TypeError('setSharedUnprotectedHeader can only be called once');\n        }\n        this._sharedUnprotectedHeader = sharedUnprotectedHeader;\n        return this;\n    }\n    setUnprotectedHeader(unprotectedHeader) {\n        if (this._unprotectedHeader) {\n            throw new TypeError('setUnprotectedHeader can only be called once');\n        }\n        this._unprotectedHeader = unprotectedHeader;\n        return this;\n    }\n    setAdditionalAuthenticatedData(aad) {\n        this._aad = aad;\n        return this;\n    }\n    setContentEncryptionKey(cek) {\n        if (this._cek) {\n            throw new TypeError('setContentEncryptionKey can only be called once');\n        }\n        this._cek = cek;\n        return this;\n    }\n    setInitializationVector(iv) {\n        if (this._iv) {\n            throw new TypeError('setInitializationVector can only be called once');\n        }\n        this._iv = iv;\n        return this;\n    }\n    async encrypt(key, options) {\n        if (!this._protectedHeader && !this._unprotectedHeader && !this._sharedUnprotectedHeader) {\n            throw new JWEInvalid('either setProtectedHeader, setUnprotectedHeader, or sharedUnprotectedHeader must be called before #encrypt()');\n        }\n        if (!isDisjoint(this._protectedHeader, this._unprotectedHeader, this._sharedUnprotectedHeader)) {\n            throw new JWEInvalid('JWE Protected, JWE Shared Unprotected and JWE Per-Recipient Header Parameter names must be disjoint');\n        }\n        const joseHeader = {\n            ...this._protectedHeader,\n            ...this._unprotectedHeader,\n            ...this._sharedUnprotectedHeader,\n        };\n        validateCrit(JWEInvalid, new Map(), options === null || options === void 0 ? void 0 : options.crit, this._protectedHeader, joseHeader);\n        if (joseHeader.zip !== undefined) {\n            if (!this._protectedHeader || !this._protectedHeader.zip) {\n                throw new JWEInvalid('JWE \"zip\" (Compression Algorithm) Header MUST be integrity protected');\n            }\n            if (joseHeader.zip !== 'DEF') {\n                throw new JOSENotSupported('Unsupported JWE \"zip\" (Compression Algorithm) Header Parameter value');\n            }\n        }\n        const { alg, enc } = joseHeader;\n        if (typeof alg !== 'string' || !alg) {\n            throw new JWEInvalid('JWE \"alg\" (Algorithm) Header Parameter missing or invalid');\n        }\n        if (typeof enc !== 'string' || !enc) {\n            throw new JWEInvalid('JWE \"enc\" (Encryption Algorithm) Header Parameter missing or invalid');\n        }\n        let encryptedKey;\n        if (alg === 'dir') {\n            if (this._cek) {\n                throw new TypeError('setContentEncryptionKey cannot be called when using Direct Encryption');\n            }\n        }\n        else if (alg === 'ECDH-ES') {\n            if (this._cek) {\n                throw new TypeError('setContentEncryptionKey cannot be called when using Direct Key Agreement');\n            }\n        }\n        let cek;\n        {\n            let parameters;\n            ({ cek, encryptedKey, parameters } = await encryptKeyManagement(alg, enc, key, this._cek, this._keyManagementParameters));\n            if (parameters) {\n                if (options && unprotected in options) {\n                    if (!this._unprotectedHeader) {\n                        this.setUnprotectedHeader(parameters);\n                    }\n                    else {\n                        this._unprotectedHeader = { ...this._unprotectedHeader, ...parameters };\n                    }\n                }\n                else {\n                    if (!this._protectedHeader) {\n                        this.setProtectedHeader(parameters);\n                    }\n                    else {\n                        this._protectedHeader = { ...this._protectedHeader, ...parameters };\n                    }\n                }\n            }\n        }\n        this._iv || (this._iv = generateIv(enc));\n        let additionalData;\n        let protectedHeader;\n        let aadMember;\n        if (this._protectedHeader) {\n            protectedHeader = encoder.encode(base64url(JSON.stringify(this._protectedHeader)));\n        }\n        else {\n            protectedHeader = encoder.encode('');\n        }\n        if (this._aad) {\n            aadMember = base64url(this._aad);\n            additionalData = concat(protectedHeader, encoder.encode('.'), encoder.encode(aadMember));\n        }\n        else {\n            additionalData = protectedHeader;\n        }\n        let ciphertext;\n        let tag;\n        if (joseHeader.zip === 'DEF') {\n            const deflated = await ((options === null || options === void 0 ? void 0 : options.deflateRaw) || deflate)(this._plaintext);\n            ({ ciphertext, tag } = await encrypt(enc, deflated, cek, this._iv, additionalData));\n        }\n        else {\n            ;\n            ({ ciphertext, tag } = await encrypt(enc, this._plaintext, cek, this._iv, additionalData));\n        }\n        const jwe = {\n            ciphertext: base64url(ciphertext),\n            iv: base64url(this._iv),\n            tag: base64url(tag),\n        };\n        if (encryptedKey) {\n            jwe.encrypted_key = base64url(encryptedKey);\n        }\n        if (aadMember) {\n            jwe.aad = aadMember;\n        }\n        if (this._protectedHeader) {\n            jwe.protected = decoder.decode(protectedHeader);\n        }\n        if (this._sharedUnprotectedHeader) {\n            jwe.unprotected = this._sharedUnprotectedHeader;\n        }\n        if (this._unprotectedHeader) {\n            jwe.header = this._unprotectedHeader;\n        }\n        return jwe;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}