{"ast":null,"code":"import { wrap as aesKw } from '../runtime/aeskw.js';\nimport * as ECDH from '../runtime/ecdhes.js';\nimport { encrypt as pbes2Kw } from '../runtime/pbes2kw.js';\nimport { encrypt as rsaEs } from '../runtime/rsaes.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nimport generateCek, { bitLength as cekLength } from '../lib/cek.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { exportJWK } from '../key/export.js';\nimport checkKeyType from './check_key_type.js';\nimport { wrap as aesGcmKw } from './aesgcmkw.js';\n\nasync function encryptKeyManagement(alg, enc, key, providedCek) {\n  let providedParameters = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};\n  let encryptedKey;\n  let parameters;\n  let cek;\n  checkKeyType(alg, key, 'encrypt');\n\n  switch (alg) {\n    case 'dir':\n      {\n        cek = key;\n        break;\n      }\n\n    case 'ECDH-ES':\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      {\n        if (!ECDH.ecdhAllowed(key)) {\n          throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n        }\n\n        const {\n          apu,\n          apv\n        } = providedParameters;\n        let {\n          epk: ephemeralKey\n        } = providedParameters;\n        ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);\n        const {\n          x,\n          y,\n          crv,\n          kty\n        } = await exportJWK(ephemeralKey);\n        const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? cekLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n        parameters = {\n          epk: {\n            x,\n            crv,\n            kty\n          }\n        };\n        if (kty === 'EC') parameters.epk.y = y;\n        if (apu) parameters.apu = base64url(apu);\n        if (apv) parameters.apv = base64url(apv);\n\n        if (alg === 'ECDH-ES') {\n          cek = sharedSecret;\n          break;\n        }\n\n        cek = providedCek || generateCek(enc);\n        const kwAlg = alg.slice(-6);\n        encryptedKey = await aesKw(kwAlg, sharedSecret, cek);\n        break;\n      }\n\n    case 'RSA1_5':\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      {\n        cek = providedCek || generateCek(enc);\n        encryptedKey = await rsaEs(alg, key, cek);\n        break;\n      }\n\n    case 'PBES2-HS256+A128KW':\n    case 'PBES2-HS384+A192KW':\n    case 'PBES2-HS512+A256KW':\n      {\n        cek = providedCek || generateCek(enc);\n        const {\n          p2c,\n          p2s\n        } = providedParameters;\n        ({\n          encryptedKey,\n          ...parameters\n        } = await pbes2Kw(alg, key, cek, p2c, p2s));\n        break;\n      }\n\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      {\n        cek = providedCek || generateCek(enc);\n        encryptedKey = await aesKw(alg, key, cek);\n        break;\n      }\n\n    case 'A128GCMKW':\n    case 'A192GCMKW':\n    case 'A256GCMKW':\n      {\n        cek = providedCek || generateCek(enc);\n        const {\n          iv\n        } = providedParameters;\n        ({\n          encryptedKey,\n          ...parameters\n        } = await aesGcmKw(alg, key, cek, iv));\n        break;\n      }\n\n    default:\n      {\n        throw new JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n      }\n  }\n\n  return {\n    cek,\n    encryptedKey,\n    parameters\n  };\n}\n\nexport default encryptKeyManagement;","map":{"version":3,"names":["wrap","aesKw","ECDH","encrypt","pbes2Kw","rsaEs","encode","base64url","generateCek","bitLength","cekLength","JOSENotSupported","exportJWK","checkKeyType","aesGcmKw","encryptKeyManagement","alg","enc","key","providedCek","providedParameters","encryptedKey","parameters","cek","ecdhAllowed","apu","apv","epk","ephemeralKey","generateEpk","privateKey","x","y","crv","kty","sharedSecret","deriveKey","parseInt","slice","kwAlg","p2c","p2s","iv"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/lib/encrypt_key_management.js"],"sourcesContent":["import { wrap as aesKw } from '../runtime/aeskw.js';\nimport * as ECDH from '../runtime/ecdhes.js';\nimport { encrypt as pbes2Kw } from '../runtime/pbes2kw.js';\nimport { encrypt as rsaEs } from '../runtime/rsaes.js';\nimport { encode as base64url } from '../runtime/base64url.js';\nimport generateCek, { bitLength as cekLength } from '../lib/cek.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport { exportJWK } from '../key/export.js';\nimport checkKeyType from './check_key_type.js';\nimport { wrap as aesGcmKw } from './aesgcmkw.js';\nasync function encryptKeyManagement(alg, enc, key, providedCek, providedParameters = {}) {\n    let encryptedKey;\n    let parameters;\n    let cek;\n    checkKeyType(alg, key, 'encrypt');\n    switch (alg) {\n        case 'dir': {\n            cek = key;\n            break;\n        }\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW': {\n            if (!ECDH.ecdhAllowed(key)) {\n                throw new JOSENotSupported('ECDH with the provided key is not allowed or not supported by your javascript runtime');\n            }\n            const { apu, apv } = providedParameters;\n            let { epk: ephemeralKey } = providedParameters;\n            ephemeralKey || (ephemeralKey = (await ECDH.generateEpk(key)).privateKey);\n            const { x, y, crv, kty } = await exportJWK(ephemeralKey);\n            const sharedSecret = await ECDH.deriveKey(key, ephemeralKey, alg === 'ECDH-ES' ? enc : alg, alg === 'ECDH-ES' ? cekLength(enc) : parseInt(alg.slice(-5, -2), 10), apu, apv);\n            parameters = { epk: { x, crv, kty } };\n            if (kty === 'EC')\n                parameters.epk.y = y;\n            if (apu)\n                parameters.apu = base64url(apu);\n            if (apv)\n                parameters.apv = base64url(apv);\n            if (alg === 'ECDH-ES') {\n                cek = sharedSecret;\n                break;\n            }\n            cek = providedCek || generateCek(enc);\n            const kwAlg = alg.slice(-6);\n            encryptedKey = await aesKw(kwAlg, sharedSecret, cek);\n            break;\n        }\n        case 'RSA1_5':\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512': {\n            cek = providedCek || generateCek(enc);\n            encryptedKey = await rsaEs(alg, key, cek);\n            break;\n        }\n        case 'PBES2-HS256+A128KW':\n        case 'PBES2-HS384+A192KW':\n        case 'PBES2-HS512+A256KW': {\n            cek = providedCek || generateCek(enc);\n            const { p2c, p2s } = providedParameters;\n            ({ encryptedKey, ...parameters } = await pbes2Kw(alg, key, cek, p2c, p2s));\n            break;\n        }\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW': {\n            cek = providedCek || generateCek(enc);\n            encryptedKey = await aesKw(alg, key, cek);\n            break;\n        }\n        case 'A128GCMKW':\n        case 'A192GCMKW':\n        case 'A256GCMKW': {\n            cek = providedCek || generateCek(enc);\n            const { iv } = providedParameters;\n            ({ encryptedKey, ...parameters } = await aesGcmKw(alg, key, cek, iv));\n            break;\n        }\n        default: {\n            throw new JOSENotSupported('Invalid or unsupported \"alg\" (JWE Algorithm) header value');\n        }\n    }\n    return { cek, encryptedKey, parameters };\n}\nexport default encryptKeyManagement;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}