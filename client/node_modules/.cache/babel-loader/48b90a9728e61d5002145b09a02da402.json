{"ast":null,"code":"import { isCloudflareWorkers, isNodeJs } from '../runtime/env.js';\n\nfunction unusable(name) {\n  let prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'algorithm.name';\n  return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);\n}\n\nfunction isAlgorithm(algorithm, name) {\n  return algorithm.name === name;\n}\n\nfunction getHashLength(hash) {\n  return parseInt(hash.name.slice(4), 10);\n}\n\nfunction getNamedCurve(alg) {\n  switch (alg) {\n    case 'ES256':\n      return 'P-256';\n\n    case 'ES384':\n      return 'P-384';\n\n    case 'ES512':\n      return 'P-521';\n\n    default:\n      throw new Error('unreachable');\n  }\n}\n\nfunction checkUsage(key, usages) {\n  if (usages.length && !usages.some(expected => key.usages.includes(expected))) {\n    let msg = 'CryptoKey does not support this operation, its usages must include ';\n\n    if (usages.length > 2) {\n      const last = usages.pop();\n      msg += `one of ${usages.join(', ')}, or ${last}.`;\n    } else if (usages.length === 2) {\n      msg += `one of ${usages[0]} or ${usages[1]}.`;\n    } else {\n      msg += `${usages[0]}.`;\n    }\n\n    throw new TypeError(msg);\n  }\n}\n\nexport function checkSigCryptoKey(key, alg) {\n  switch (alg) {\n    case 'HS256':\n    case 'HS384':\n    case 'HS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'HMAC')) throw unusable('HMAC');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5')) throw unusable('RSASSA-PKCS1-v1_5');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSA-PSS')) throw unusable('RSA-PSS');\n        const expected = parseInt(alg.slice(2), 10);\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n\n    case isNodeJs() && 'EdDSA':\n      {\n        if (key.algorithm.name !== 'NODE-ED25519' && key.algorithm.name !== 'NODE-ED448') throw unusable('NODE-ED25519 or NODE-ED448');\n        break;\n      }\n\n    case isCloudflareWorkers() && 'EdDSA':\n      {\n        if (!isAlgorithm(key.algorithm, 'NODE-ED25519')) throw unusable('NODE-ED25519');\n        break;\n      }\n\n    case 'ES256':\n    case 'ES384':\n    case 'ES512':\n      {\n        if (!isAlgorithm(key.algorithm, 'ECDSA')) throw unusable('ECDSA');\n        const expected = getNamedCurve(alg);\n        const actual = key.algorithm.namedCurve;\n        if (actual !== expected) throw unusable(expected, 'algorithm.namedCurve');\n        break;\n      }\n\n    default:\n      throw new TypeError('CryptoKey does not support this operation');\n  }\n\n  for (var _len = arguments.length, usages = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    usages[_key - 2] = arguments[_key];\n  }\n\n  checkUsage(key, usages);\n}\nexport function checkEncCryptoKey(key, alg) {\n  switch (alg) {\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      {\n        if (!isAlgorithm(key.algorithm, 'AES-GCM')) throw unusable('AES-GCM');\n        const expected = parseInt(alg.slice(1, 4), 10);\n        const actual = key.algorithm.length;\n        if (actual !== expected) throw unusable(expected, 'algorithm.length');\n        break;\n      }\n\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      {\n        if (!isAlgorithm(key.algorithm, 'AES-KW')) throw unusable('AES-KW');\n        const expected = parseInt(alg.slice(1, 4), 10);\n        const actual = key.algorithm.length;\n        if (actual !== expected) throw unusable(expected, 'algorithm.length');\n        break;\n      }\n\n    case 'ECDH':\n      if (!isAlgorithm(key.algorithm, 'ECDH')) throw unusable('ECDH');\n      break;\n\n    case 'PBES2-HS256+A128KW':\n    case 'PBES2-HS384+A192KW':\n    case 'PBES2-HS512+A256KW':\n      if (!isAlgorithm(key.algorithm, 'PBKDF2')) throw unusable('PBKDF2');\n      break;\n\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      {\n        if (!isAlgorithm(key.algorithm, 'RSA-OAEP')) throw unusable('RSA-OAEP');\n        const expected = parseInt(alg.slice(9), 10) || 1;\n        const actual = getHashLength(key.algorithm.hash);\n        if (actual !== expected) throw unusable(`SHA-${expected}`, 'algorithm.hash');\n        break;\n      }\n\n    default:\n      throw new TypeError('CryptoKey does not support this operation');\n  }\n\n  for (var _len2 = arguments.length, usages = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n    usages[_key2 - 2] = arguments[_key2];\n  }\n\n  checkUsage(key, usages);\n}","map":{"version":3,"names":["isCloudflareWorkers","isNodeJs","unusable","name","prop","TypeError","isAlgorithm","algorithm","getHashLength","hash","parseInt","slice","getNamedCurve","alg","Error","checkUsage","key","usages","length","some","expected","includes","msg","last","pop","join","checkSigCryptoKey","actual","namedCurve","checkEncCryptoKey"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/lib/crypto_key.js"],"sourcesContent":["import { isCloudflareWorkers, isNodeJs } from '../runtime/env.js';\nfunction unusable(name, prop = 'algorithm.name') {\n    return new TypeError(`CryptoKey does not support this operation, its ${prop} must be ${name}`);\n}\nfunction isAlgorithm(algorithm, name) {\n    return algorithm.name === name;\n}\nfunction getHashLength(hash) {\n    return parseInt(hash.name.slice(4), 10);\n}\nfunction getNamedCurve(alg) {\n    switch (alg) {\n        case 'ES256':\n            return 'P-256';\n        case 'ES384':\n            return 'P-384';\n        case 'ES512':\n            return 'P-521';\n        default:\n            throw new Error('unreachable');\n    }\n}\nfunction checkUsage(key, usages) {\n    if (usages.length && !usages.some((expected) => key.usages.includes(expected))) {\n        let msg = 'CryptoKey does not support this operation, its usages must include ';\n        if (usages.length > 2) {\n            const last = usages.pop();\n            msg += `one of ${usages.join(', ')}, or ${last}.`;\n        }\n        else if (usages.length === 2) {\n            msg += `one of ${usages[0]} or ${usages[1]}.`;\n        }\n        else {\n            msg += `${usages[0]}.`;\n        }\n        throw new TypeError(msg);\n    }\n}\nexport function checkSigCryptoKey(key, alg, ...usages) {\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512': {\n            if (!isAlgorithm(key.algorithm, 'HMAC'))\n                throw unusable('HMAC');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'RS256':\n        case 'RS384':\n        case 'RS512': {\n            if (!isAlgorithm(key.algorithm, 'RSASSA-PKCS1-v1_5'))\n                throw unusable('RSASSA-PKCS1-v1_5');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case 'PS256':\n        case 'PS384':\n        case 'PS512': {\n            if (!isAlgorithm(key.algorithm, 'RSA-PSS'))\n                throw unusable('RSA-PSS');\n            const expected = parseInt(alg.slice(2), 10);\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        case isNodeJs() && 'EdDSA': {\n            if (key.algorithm.name !== 'NODE-ED25519' && key.algorithm.name !== 'NODE-ED448')\n                throw unusable('NODE-ED25519 or NODE-ED448');\n            break;\n        }\n        case isCloudflareWorkers() && 'EdDSA': {\n            if (!isAlgorithm(key.algorithm, 'NODE-ED25519'))\n                throw unusable('NODE-ED25519');\n            break;\n        }\n        case 'ES256':\n        case 'ES384':\n        case 'ES512': {\n            if (!isAlgorithm(key.algorithm, 'ECDSA'))\n                throw unusable('ECDSA');\n            const expected = getNamedCurve(alg);\n            const actual = key.algorithm.namedCurve;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.namedCurve');\n            break;\n        }\n        default:\n            throw new TypeError('CryptoKey does not support this operation');\n    }\n    checkUsage(key, usages);\n}\nexport function checkEncCryptoKey(key, alg, ...usages) {\n    switch (alg) {\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM': {\n            if (!isAlgorithm(key.algorithm, 'AES-GCM'))\n                throw unusable('AES-GCM');\n            const expected = parseInt(alg.slice(1, 4), 10);\n            const actual = key.algorithm.length;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.length');\n            break;\n        }\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW': {\n            if (!isAlgorithm(key.algorithm, 'AES-KW'))\n                throw unusable('AES-KW');\n            const expected = parseInt(alg.slice(1, 4), 10);\n            const actual = key.algorithm.length;\n            if (actual !== expected)\n                throw unusable(expected, 'algorithm.length');\n            break;\n        }\n        case 'ECDH':\n            if (!isAlgorithm(key.algorithm, 'ECDH'))\n                throw unusable('ECDH');\n            break;\n        case 'PBES2-HS256+A128KW':\n        case 'PBES2-HS384+A192KW':\n        case 'PBES2-HS512+A256KW':\n            if (!isAlgorithm(key.algorithm, 'PBKDF2'))\n                throw unusable('PBKDF2');\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512': {\n            if (!isAlgorithm(key.algorithm, 'RSA-OAEP'))\n                throw unusable('RSA-OAEP');\n            const expected = parseInt(alg.slice(9), 10) || 1;\n            const actual = getHashLength(key.algorithm.hash);\n            if (actual !== expected)\n                throw unusable(`SHA-${expected}`, 'algorithm.hash');\n            break;\n        }\n        default:\n            throw new TypeError('CryptoKey does not support this operation');\n    }\n    checkUsage(key, usages);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}