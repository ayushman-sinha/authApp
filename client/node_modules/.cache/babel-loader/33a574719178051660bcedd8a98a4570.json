{"ast":null,"code":"import { compactDecrypt } from '../jwe/compact/decrypt.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { JWTClaimValidationFailed } from '../util/errors.js';\nexport async function jwtDecrypt(jwt, key, options) {\n  const decrypted = await compactDecrypt(jwt, key, options);\n  const payload = jwtPayload(decrypted.protectedHeader, decrypted.plaintext, options);\n  const {\n    protectedHeader\n  } = decrypted;\n\n  if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {\n    throw new JWTClaimValidationFailed('replicated \"iss\" claim header parameter mismatch', 'iss', 'mismatch');\n  }\n\n  if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {\n    throw new JWTClaimValidationFailed('replicated \"sub\" claim header parameter mismatch', 'sub', 'mismatch');\n  }\n\n  if (protectedHeader.aud !== undefined && JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {\n    throw new JWTClaimValidationFailed('replicated \"aud\" claim header parameter mismatch', 'aud', 'mismatch');\n  }\n\n  const result = {\n    payload,\n    protectedHeader\n  };\n\n  if (typeof key === 'function') {\n    return { ...result,\n      key: decrypted.key\n    };\n  }\n\n  return result;\n}","map":{"version":3,"names":["compactDecrypt","jwtPayload","JWTClaimValidationFailed","jwtDecrypt","jwt","key","options","decrypted","payload","protectedHeader","plaintext","iss","undefined","sub","aud","JSON","stringify","result"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/jwt/decrypt.js"],"sourcesContent":["import { compactDecrypt } from '../jwe/compact/decrypt.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { JWTClaimValidationFailed } from '../util/errors.js';\nexport async function jwtDecrypt(jwt, key, options) {\n    const decrypted = await compactDecrypt(jwt, key, options);\n    const payload = jwtPayload(decrypted.protectedHeader, decrypted.plaintext, options);\n    const { protectedHeader } = decrypted;\n    if (protectedHeader.iss !== undefined && protectedHeader.iss !== payload.iss) {\n        throw new JWTClaimValidationFailed('replicated \"iss\" claim header parameter mismatch', 'iss', 'mismatch');\n    }\n    if (protectedHeader.sub !== undefined && protectedHeader.sub !== payload.sub) {\n        throw new JWTClaimValidationFailed('replicated \"sub\" claim header parameter mismatch', 'sub', 'mismatch');\n    }\n    if (protectedHeader.aud !== undefined &&\n        JSON.stringify(protectedHeader.aud) !== JSON.stringify(payload.aud)) {\n        throw new JWTClaimValidationFailed('replicated \"aud\" claim header parameter mismatch', 'aud', 'mismatch');\n    }\n    const result = { payload, protectedHeader };\n    if (typeof key === 'function') {\n        return { ...result, key: decrypted.key };\n    }\n    return result;\n}\n"],"mappings":"AAAA,SAASA,cAAT,QAA+B,2BAA/B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,wBAAT,QAAyC,mBAAzC;AACA,OAAO,eAAeC,UAAf,CAA0BC,GAA1B,EAA+BC,GAA/B,EAAoCC,OAApC,EAA6C;EAChD,MAAMC,SAAS,GAAG,MAAMP,cAAc,CAACI,GAAD,EAAMC,GAAN,EAAWC,OAAX,CAAtC;EACA,MAAME,OAAO,GAAGP,UAAU,CAACM,SAAS,CAACE,eAAX,EAA4BF,SAAS,CAACG,SAAtC,EAAiDJ,OAAjD,CAA1B;EACA,MAAM;IAAEG;EAAF,IAAsBF,SAA5B;;EACA,IAAIE,eAAe,CAACE,GAAhB,KAAwBC,SAAxB,IAAqCH,eAAe,CAACE,GAAhB,KAAwBH,OAAO,CAACG,GAAzE,EAA8E;IAC1E,MAAM,IAAIT,wBAAJ,CAA6B,kDAA7B,EAAiF,KAAjF,EAAwF,UAAxF,CAAN;EACH;;EACD,IAAIO,eAAe,CAACI,GAAhB,KAAwBD,SAAxB,IAAqCH,eAAe,CAACI,GAAhB,KAAwBL,OAAO,CAACK,GAAzE,EAA8E;IAC1E,MAAM,IAAIX,wBAAJ,CAA6B,kDAA7B,EAAiF,KAAjF,EAAwF,UAAxF,CAAN;EACH;;EACD,IAAIO,eAAe,CAACK,GAAhB,KAAwBF,SAAxB,IACAG,IAAI,CAACC,SAAL,CAAeP,eAAe,CAACK,GAA/B,MAAwCC,IAAI,CAACC,SAAL,CAAeR,OAAO,CAACM,GAAvB,CAD5C,EACyE;IACrE,MAAM,IAAIZ,wBAAJ,CAA6B,kDAA7B,EAAiF,KAAjF,EAAwF,UAAxF,CAAN;EACH;;EACD,MAAMe,MAAM,GAAG;IAAET,OAAF;IAAWC;EAAX,CAAf;;EACA,IAAI,OAAOJ,GAAP,KAAe,UAAnB,EAA+B;IAC3B,OAAO,EAAE,GAAGY,MAAL;MAAaZ,GAAG,EAAEE,SAAS,CAACF;IAA5B,CAAP;EACH;;EACD,OAAOY,MAAP;AACH"},"metadata":{},"sourceType":"module"}