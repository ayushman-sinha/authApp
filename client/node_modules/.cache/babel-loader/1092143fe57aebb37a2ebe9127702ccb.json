{"ast":null,"code":"import subtleAlgorithm from './subtle_rsaes.js';\nimport bogusWebCrypto from './bogus.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport checkKeyLength from './check_key_length.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nexport const encrypt = async (alg, key, cek) => {\n  if (!isCryptoKey(key)) {\n    throw new TypeError(invalidKeyInput(key, ...types));\n  }\n\n  checkEncCryptoKey(key, alg, 'encrypt', 'wrapKey');\n  checkKeyLength(alg, key);\n\n  if (key.usages.includes('encrypt')) {\n    return new Uint8Array(await crypto.subtle.encrypt(subtleAlgorithm(alg), key, cek));\n  }\n\n  if (key.usages.includes('wrapKey')) {\n    const cryptoKeyCek = await crypto.subtle.importKey('raw', cek, ...bogusWebCrypto);\n    return new Uint8Array(await crypto.subtle.wrapKey('raw', cryptoKeyCek, key, subtleAlgorithm(alg)));\n  }\n\n  throw new TypeError('RSA-OAEP key \"usages\" must include \"encrypt\" or \"wrapKey\" for this operation');\n};\nexport const decrypt = async (alg, key, encryptedKey) => {\n  if (!isCryptoKey(key)) {\n    throw new TypeError(invalidKeyInput(key, ...types));\n  }\n\n  checkEncCryptoKey(key, alg, 'decrypt', 'unwrapKey');\n  checkKeyLength(alg, key);\n\n  if (key.usages.includes('decrypt')) {\n    return new Uint8Array(await crypto.subtle.decrypt(subtleAlgorithm(alg), key, encryptedKey));\n  }\n\n  if (key.usages.includes('unwrapKey')) {\n    const cryptoKeyCek = await crypto.subtle.unwrapKey('raw', encryptedKey, key, subtleAlgorithm(alg), ...bogusWebCrypto);\n    return new Uint8Array(await crypto.subtle.exportKey('raw', cryptoKeyCek));\n  }\n\n  throw new TypeError('RSA-OAEP key \"usages\" must include \"decrypt\" or \"unwrapKey\" for this operation');\n};","map":{"version":3,"names":["subtleAlgorithm","bogusWebCrypto","crypto","isCryptoKey","checkEncCryptoKey","checkKeyLength","invalidKeyInput","types","encrypt","alg","key","cek","TypeError","usages","includes","Uint8Array","subtle","cryptoKeyCek","importKey","wrapKey","decrypt","encryptedKey","unwrapKey","exportKey"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/runtime/rsaes.js"],"sourcesContent":["import subtleAlgorithm from './subtle_rsaes.js';\nimport bogusWebCrypto from './bogus.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport checkKeyLength from './check_key_length.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nexport const encrypt = async (alg, key, cek) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    checkEncCryptoKey(key, alg, 'encrypt', 'wrapKey');\n    checkKeyLength(alg, key);\n    if (key.usages.includes('encrypt')) {\n        return new Uint8Array(await crypto.subtle.encrypt(subtleAlgorithm(alg), key, cek));\n    }\n    if (key.usages.includes('wrapKey')) {\n        const cryptoKeyCek = await crypto.subtle.importKey('raw', cek, ...bogusWebCrypto);\n        return new Uint8Array(await crypto.subtle.wrapKey('raw', cryptoKeyCek, key, subtleAlgorithm(alg)));\n    }\n    throw new TypeError('RSA-OAEP key \"usages\" must include \"encrypt\" or \"wrapKey\" for this operation');\n};\nexport const decrypt = async (alg, key, encryptedKey) => {\n    if (!isCryptoKey(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    checkEncCryptoKey(key, alg, 'decrypt', 'unwrapKey');\n    checkKeyLength(alg, key);\n    if (key.usages.includes('decrypt')) {\n        return new Uint8Array(await crypto.subtle.decrypt(subtleAlgorithm(alg), key, encryptedKey));\n    }\n    if (key.usages.includes('unwrapKey')) {\n        const cryptoKeyCek = await crypto.subtle.unwrapKey('raw', encryptedKey, key, subtleAlgorithm(alg), ...bogusWebCrypto);\n        return new Uint8Array(await crypto.subtle.exportKey('raw', cryptoKeyCek));\n    }\n    throw new TypeError('RSA-OAEP key \"usages\" must include \"decrypt\" or \"unwrapKey\" for this operation');\n};\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,mBAA5B;AACA,OAAOC,cAAP,MAA2B,YAA3B;AACA,OAAOC,MAAP,IAAiBC,WAAjB,QAAoC,gBAApC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAOC,cAAP,MAA2B,uBAA3B;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,SAASC,KAAT,QAAsB,kBAAtB;AACA,OAAO,MAAMC,OAAO,GAAG,OAAOC,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB,KAAyB;EAC5C,IAAI,CAACR,WAAW,CAACO,GAAD,CAAhB,EAAuB;IACnB,MAAM,IAAIE,SAAJ,CAAcN,eAAe,CAACI,GAAD,EAAM,GAAGH,KAAT,CAA7B,CAAN;EACH;;EACDH,iBAAiB,CAACM,GAAD,EAAMD,GAAN,EAAW,SAAX,EAAsB,SAAtB,CAAjB;EACAJ,cAAc,CAACI,GAAD,EAAMC,GAAN,CAAd;;EACA,IAAIA,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;IAChC,OAAO,IAAIC,UAAJ,CAAe,MAAMb,MAAM,CAACc,MAAP,CAAcR,OAAd,CAAsBR,eAAe,CAACS,GAAD,CAArC,EAA4CC,GAA5C,EAAiDC,GAAjD,CAArB,CAAP;EACH;;EACD,IAAID,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;IAChC,MAAMG,YAAY,GAAG,MAAMf,MAAM,CAACc,MAAP,CAAcE,SAAd,CAAwB,KAAxB,EAA+BP,GAA/B,EAAoC,GAAGV,cAAvC,CAA3B;IACA,OAAO,IAAIc,UAAJ,CAAe,MAAMb,MAAM,CAACc,MAAP,CAAcG,OAAd,CAAsB,KAAtB,EAA6BF,YAA7B,EAA2CP,GAA3C,EAAgDV,eAAe,CAACS,GAAD,CAA/D,CAArB,CAAP;EACH;;EACD,MAAM,IAAIG,SAAJ,CAAc,8EAAd,CAAN;AACH,CAdM;AAeP,OAAO,MAAMQ,OAAO,GAAG,OAAOX,GAAP,EAAYC,GAAZ,EAAiBW,YAAjB,KAAkC;EACrD,IAAI,CAAClB,WAAW,CAACO,GAAD,CAAhB,EAAuB;IACnB,MAAM,IAAIE,SAAJ,CAAcN,eAAe,CAACI,GAAD,EAAM,GAAGH,KAAT,CAA7B,CAAN;EACH;;EACDH,iBAAiB,CAACM,GAAD,EAAMD,GAAN,EAAW,SAAX,EAAsB,WAAtB,CAAjB;EACAJ,cAAc,CAACI,GAAD,EAAMC,GAAN,CAAd;;EACA,IAAIA,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoB,SAApB,CAAJ,EAAoC;IAChC,OAAO,IAAIC,UAAJ,CAAe,MAAMb,MAAM,CAACc,MAAP,CAAcI,OAAd,CAAsBpB,eAAe,CAACS,GAAD,CAArC,EAA4CC,GAA5C,EAAiDW,YAAjD,CAArB,CAAP;EACH;;EACD,IAAIX,GAAG,CAACG,MAAJ,CAAWC,QAAX,CAAoB,WAApB,CAAJ,EAAsC;IAClC,MAAMG,YAAY,GAAG,MAAMf,MAAM,CAACc,MAAP,CAAcM,SAAd,CAAwB,KAAxB,EAA+BD,YAA/B,EAA6CX,GAA7C,EAAkDV,eAAe,CAACS,GAAD,CAAjE,EAAwE,GAAGR,cAA3E,CAA3B;IACA,OAAO,IAAIc,UAAJ,CAAe,MAAMb,MAAM,CAACc,MAAP,CAAcO,SAAd,CAAwB,KAAxB,EAA+BN,YAA/B,CAArB,CAAP;EACH;;EACD,MAAM,IAAIL,SAAJ,CAAc,gFAAd,CAAN;AACH,CAdM"},"metadata":{},"sourceType":"module"}