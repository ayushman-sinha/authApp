{"ast":null,"code":"import random from './random.js';\nimport { p2s as concatSalt } from '../lib/buffer_utils.js';\nimport { encode as base64url } from './base64url.js';\nimport { wrap, unwrap } from './aeskw.js';\nimport checkP2s from '../lib/check_p2s.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\n\nfunction getCryptoKey(key, alg) {\n  if (key instanceof Uint8Array) {\n    return crypto.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);\n  }\n\n  if (isCryptoKey(key)) {\n    checkEncCryptoKey(key, alg, 'deriveBits', 'deriveKey');\n    return key;\n  }\n\n  throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n}\n\nasync function deriveKey(p2s, alg, p2c, key) {\n  checkP2s(p2s);\n  const salt = concatSalt(alg, p2s);\n  const keylen = parseInt(alg.slice(13, 16), 10);\n  const subtleAlg = {\n    hash: `SHA-${alg.slice(8, 11)}`,\n    iterations: p2c,\n    name: 'PBKDF2',\n    salt\n  };\n  const wrapAlg = {\n    length: keylen,\n    name: 'AES-KW'\n  };\n  const cryptoKey = await getCryptoKey(key, alg);\n\n  if (cryptoKey.usages.includes('deriveBits')) {\n    return new Uint8Array(await crypto.subtle.deriveBits(subtleAlg, cryptoKey, keylen));\n  }\n\n  if (cryptoKey.usages.includes('deriveKey')) {\n    return crypto.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);\n  }\n\n  throw new TypeError('PBKDF2 key \"usages\" must include \"deriveBits\" or \"deriveKey\"');\n}\n\nexport const encrypt = async function (alg, key, cek) {\n  let p2c = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 2048;\n  let p2s = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : random(new Uint8Array(16));\n  const derived = await deriveKey(p2s, alg, p2c, key);\n  const encryptedKey = await wrap(alg.slice(-6), derived, cek);\n  return {\n    encryptedKey,\n    p2c,\n    p2s: base64url(p2s)\n  };\n};\nexport const decrypt = async (alg, key, encryptedKey, p2c, p2s) => {\n  const derived = await deriveKey(p2s, alg, p2c, key);\n  return unwrap(alg.slice(-6), derived, encryptedKey);\n};","map":{"version":3,"names":["random","p2s","concatSalt","encode","base64url","wrap","unwrap","checkP2s","crypto","isCryptoKey","checkEncCryptoKey","invalidKeyInput","types","getCryptoKey","key","alg","Uint8Array","subtle","importKey","TypeError","deriveKey","p2c","salt","keylen","parseInt","slice","subtleAlg","hash","iterations","name","wrapAlg","length","cryptoKey","usages","includes","deriveBits","encrypt","cek","derived","encryptedKey","decrypt"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/runtime/pbes2kw.js"],"sourcesContent":["import random from './random.js';\nimport { p2s as concatSalt } from '../lib/buffer_utils.js';\nimport { encode as base64url } from './base64url.js';\nimport { wrap, unwrap } from './aeskw.js';\nimport checkP2s from '../lib/check_p2s.js';\nimport crypto, { isCryptoKey } from './webcrypto.js';\nimport { checkEncCryptoKey } from '../lib/crypto_key.js';\nimport invalidKeyInput from '../lib/invalid_key_input.js';\nimport { types } from './is_key_like.js';\nfunction getCryptoKey(key, alg) {\n    if (key instanceof Uint8Array) {\n        return crypto.subtle.importKey('raw', key, 'PBKDF2', false, ['deriveBits']);\n    }\n    if (isCryptoKey(key)) {\n        checkEncCryptoKey(key, alg, 'deriveBits', 'deriveKey');\n        return key;\n    }\n    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n}\nasync function deriveKey(p2s, alg, p2c, key) {\n    checkP2s(p2s);\n    const salt = concatSalt(alg, p2s);\n    const keylen = parseInt(alg.slice(13, 16), 10);\n    const subtleAlg = {\n        hash: `SHA-${alg.slice(8, 11)}`,\n        iterations: p2c,\n        name: 'PBKDF2',\n        salt,\n    };\n    const wrapAlg = {\n        length: keylen,\n        name: 'AES-KW',\n    };\n    const cryptoKey = await getCryptoKey(key, alg);\n    if (cryptoKey.usages.includes('deriveBits')) {\n        return new Uint8Array(await crypto.subtle.deriveBits(subtleAlg, cryptoKey, keylen));\n    }\n    if (cryptoKey.usages.includes('deriveKey')) {\n        return crypto.subtle.deriveKey(subtleAlg, cryptoKey, wrapAlg, false, ['wrapKey', 'unwrapKey']);\n    }\n    throw new TypeError('PBKDF2 key \"usages\" must include \"deriveBits\" or \"deriveKey\"');\n}\nexport const encrypt = async (alg, key, cek, p2c = 2048, p2s = random(new Uint8Array(16))) => {\n    const derived = await deriveKey(p2s, alg, p2c, key);\n    const encryptedKey = await wrap(alg.slice(-6), derived, cek);\n    return { encryptedKey, p2c, p2s: base64url(p2s) };\n};\nexport const decrypt = async (alg, key, encryptedKey, p2c, p2s) => {\n    const derived = await deriveKey(p2s, alg, p2c, key);\n    return unwrap(alg.slice(-6), derived, encryptedKey);\n};\n"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,aAAnB;AACA,SAASC,GAAG,IAAIC,UAAhB,QAAkC,wBAAlC;AACA,SAASC,MAAM,IAAIC,SAAnB,QAAoC,gBAApC;AACA,SAASC,IAAT,EAAeC,MAAf,QAA6B,YAA7B;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,OAAOC,MAAP,IAAiBC,WAAjB,QAAoC,gBAApC;AACA,SAASC,iBAAT,QAAkC,sBAAlC;AACA,OAAOC,eAAP,MAA4B,6BAA5B;AACA,SAASC,KAAT,QAAsB,kBAAtB;;AACA,SAASC,YAAT,CAAsBC,GAAtB,EAA2BC,GAA3B,EAAgC;EAC5B,IAAID,GAAG,YAAYE,UAAnB,EAA+B;IAC3B,OAAOR,MAAM,CAACS,MAAP,CAAcC,SAAd,CAAwB,KAAxB,EAA+BJ,GAA/B,EAAoC,QAApC,EAA8C,KAA9C,EAAqD,CAAC,YAAD,CAArD,CAAP;EACH;;EACD,IAAIL,WAAW,CAACK,GAAD,CAAf,EAAsB;IAClBJ,iBAAiB,CAACI,GAAD,EAAMC,GAAN,EAAW,YAAX,EAAyB,WAAzB,CAAjB;IACA,OAAOD,GAAP;EACH;;EACD,MAAM,IAAIK,SAAJ,CAAcR,eAAe,CAACG,GAAD,EAAM,GAAGF,KAAT,EAAgB,YAAhB,CAA7B,CAAN;AACH;;AACD,eAAeQ,SAAf,CAAyBnB,GAAzB,EAA8Bc,GAA9B,EAAmCM,GAAnC,EAAwCP,GAAxC,EAA6C;EACzCP,QAAQ,CAACN,GAAD,CAAR;EACA,MAAMqB,IAAI,GAAGpB,UAAU,CAACa,GAAD,EAAMd,GAAN,CAAvB;EACA,MAAMsB,MAAM,GAAGC,QAAQ,CAACT,GAAG,CAACU,KAAJ,CAAU,EAAV,EAAc,EAAd,CAAD,EAAoB,EAApB,CAAvB;EACA,MAAMC,SAAS,GAAG;IACdC,IAAI,EAAG,OAAMZ,GAAG,CAACU,KAAJ,CAAU,CAAV,EAAa,EAAb,CAAiB,EADhB;IAEdG,UAAU,EAAEP,GAFE;IAGdQ,IAAI,EAAE,QAHQ;IAIdP;EAJc,CAAlB;EAMA,MAAMQ,OAAO,GAAG;IACZC,MAAM,EAAER,MADI;IAEZM,IAAI,EAAE;EAFM,CAAhB;EAIA,MAAMG,SAAS,GAAG,MAAMnB,YAAY,CAACC,GAAD,EAAMC,GAAN,CAApC;;EACA,IAAIiB,SAAS,CAACC,MAAV,CAAiBC,QAAjB,CAA0B,YAA1B,CAAJ,EAA6C;IACzC,OAAO,IAAIlB,UAAJ,CAAe,MAAMR,MAAM,CAACS,MAAP,CAAckB,UAAd,CAAyBT,SAAzB,EAAoCM,SAApC,EAA+CT,MAA/C,CAArB,CAAP;EACH;;EACD,IAAIS,SAAS,CAACC,MAAV,CAAiBC,QAAjB,CAA0B,WAA1B,CAAJ,EAA4C;IACxC,OAAO1B,MAAM,CAACS,MAAP,CAAcG,SAAd,CAAwBM,SAAxB,EAAmCM,SAAnC,EAA8CF,OAA9C,EAAuD,KAAvD,EAA8D,CAAC,SAAD,EAAY,WAAZ,CAA9D,CAAP;EACH;;EACD,MAAM,IAAIX,SAAJ,CAAc,8DAAd,CAAN;AACH;;AACD,OAAO,MAAMiB,OAAO,GAAG,gBAAOrB,GAAP,EAAYD,GAAZ,EAAiBuB,GAAjB,EAAuE;EAAA,IAAjDhB,GAAiD,uEAA3C,IAA2C;EAAA,IAArCpB,GAAqC,uEAA/BD,MAAM,CAAC,IAAIgB,UAAJ,CAAe,EAAf,CAAD,CAAyB;EAC1F,MAAMsB,OAAO,GAAG,MAAMlB,SAAS,CAACnB,GAAD,EAAMc,GAAN,EAAWM,GAAX,EAAgBP,GAAhB,CAA/B;EACA,MAAMyB,YAAY,GAAG,MAAMlC,IAAI,CAACU,GAAG,CAACU,KAAJ,CAAU,CAAC,CAAX,CAAD,EAAgBa,OAAhB,EAAyBD,GAAzB,CAA/B;EACA,OAAO;IAAEE,YAAF;IAAgBlB,GAAhB;IAAqBpB,GAAG,EAAEG,SAAS,CAACH,GAAD;EAAnC,CAAP;AACH,CAJM;AAKP,OAAO,MAAMuC,OAAO,GAAG,OAAOzB,GAAP,EAAYD,GAAZ,EAAiByB,YAAjB,EAA+BlB,GAA/B,EAAoCpB,GAApC,KAA4C;EAC/D,MAAMqC,OAAO,GAAG,MAAMlB,SAAS,CAACnB,GAAD,EAAMc,GAAN,EAAWM,GAAX,EAAgBP,GAAhB,CAA/B;EACA,OAAOR,MAAM,CAACS,GAAG,CAACU,KAAJ,CAAU,CAAC,CAAX,CAAD,EAAgBa,OAAhB,EAAyBC,YAAzB,CAAb;AACH,CAHM"},"metadata":{},"sourceType":"module"}