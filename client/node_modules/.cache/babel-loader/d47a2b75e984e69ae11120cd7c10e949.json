{"ast":null,"code":"import * as base64url from '../runtime/base64url.js';\nimport { decoder } from '../lib/buffer_utils.js';\nimport { JWTInvalid } from '../util/errors.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { ProduceJWT } from './produce.js';\nexport class UnsecuredJWT extends ProduceJWT {\n  encode() {\n    const header = base64url.encode(JSON.stringify({\n      alg: 'none'\n    }));\n    const payload = base64url.encode(JSON.stringify(this._payload));\n    return `${header}.${payload}.`;\n  }\n\n  static decode(jwt, options) {\n    if (typeof jwt !== 'string') {\n      throw new JWTInvalid('Unsecured JWT must be a string');\n    }\n\n    const {\n      0: encodedHeader,\n      1: encodedPayload,\n      2: signature,\n      length\n    } = jwt.split('.');\n\n    if (length !== 3 || signature !== '') {\n      throw new JWTInvalid('Invalid Unsecured JWT');\n    }\n\n    let header;\n\n    try {\n      header = JSON.parse(decoder.decode(base64url.decode(encodedHeader)));\n      if (header.alg !== 'none') throw new Error();\n    } catch (_a) {\n      throw new JWTInvalid('Invalid Unsecured JWT');\n    }\n\n    const payload = jwtPayload(header, base64url.decode(encodedPayload), options);\n    return {\n      payload,\n      header\n    };\n  }\n\n}","map":{"version":3,"names":["base64url","decoder","JWTInvalid","jwtPayload","ProduceJWT","UnsecuredJWT","encode","header","JSON","stringify","alg","payload","_payload","decode","jwt","options","encodedHeader","encodedPayload","signature","length","split","parse","Error","_a"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/jwt/unsecured.js"],"sourcesContent":["import * as base64url from '../runtime/base64url.js';\nimport { decoder } from '../lib/buffer_utils.js';\nimport { JWTInvalid } from '../util/errors.js';\nimport jwtPayload from '../lib/jwt_claims_set.js';\nimport { ProduceJWT } from './produce.js';\nexport class UnsecuredJWT extends ProduceJWT {\n    encode() {\n        const header = base64url.encode(JSON.stringify({ alg: 'none' }));\n        const payload = base64url.encode(JSON.stringify(this._payload));\n        return `${header}.${payload}.`;\n    }\n    static decode(jwt, options) {\n        if (typeof jwt !== 'string') {\n            throw new JWTInvalid('Unsecured JWT must be a string');\n        }\n        const { 0: encodedHeader, 1: encodedPayload, 2: signature, length } = jwt.split('.');\n        if (length !== 3 || signature !== '') {\n            throw new JWTInvalid('Invalid Unsecured JWT');\n        }\n        let header;\n        try {\n            header = JSON.parse(decoder.decode(base64url.decode(encodedHeader)));\n            if (header.alg !== 'none')\n                throw new Error();\n        }\n        catch (_a) {\n            throw new JWTInvalid('Invalid Unsecured JWT');\n        }\n        const payload = jwtPayload(header, base64url.decode(encodedPayload), options);\n        return { payload, header };\n    }\n}\n"],"mappings":"AAAA,OAAO,KAAKA,SAAZ,MAA2B,yBAA3B;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,OAAOC,UAAP,MAAuB,0BAAvB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,OAAO,MAAMC,YAAN,SAA2BD,UAA3B,CAAsC;EACzCE,MAAM,GAAG;IACL,MAAMC,MAAM,GAAGP,SAAS,CAACM,MAAV,CAAiBE,IAAI,CAACC,SAAL,CAAe;MAAEC,GAAG,EAAE;IAAP,CAAf,CAAjB,CAAf;IACA,MAAMC,OAAO,GAAGX,SAAS,CAACM,MAAV,CAAiBE,IAAI,CAACC,SAAL,CAAe,KAAKG,QAApB,CAAjB,CAAhB;IACA,OAAQ,GAAEL,MAAO,IAAGI,OAAQ,GAA5B;EACH;;EACY,OAANE,MAAM,CAACC,GAAD,EAAMC,OAAN,EAAe;IACxB,IAAI,OAAOD,GAAP,KAAe,QAAnB,EAA6B;MACzB,MAAM,IAAIZ,UAAJ,CAAe,gCAAf,CAAN;IACH;;IACD,MAAM;MAAE,GAAGc,aAAL;MAAoB,GAAGC,cAAvB;MAAuC,GAAGC,SAA1C;MAAqDC;IAArD,IAAgEL,GAAG,CAACM,KAAJ,CAAU,GAAV,CAAtE;;IACA,IAAID,MAAM,KAAK,CAAX,IAAgBD,SAAS,KAAK,EAAlC,EAAsC;MAClC,MAAM,IAAIhB,UAAJ,CAAe,uBAAf,CAAN;IACH;;IACD,IAAIK,MAAJ;;IACA,IAAI;MACAA,MAAM,GAAGC,IAAI,CAACa,KAAL,CAAWpB,OAAO,CAACY,MAAR,CAAeb,SAAS,CAACa,MAAV,CAAiBG,aAAjB,CAAf,CAAX,CAAT;MACA,IAAIT,MAAM,CAACG,GAAP,KAAe,MAAnB,EACI,MAAM,IAAIY,KAAJ,EAAN;IACP,CAJD,CAKA,OAAOC,EAAP,EAAW;MACP,MAAM,IAAIrB,UAAJ,CAAe,uBAAf,CAAN;IACH;;IACD,MAAMS,OAAO,GAAGR,UAAU,CAACI,MAAD,EAASP,SAAS,CAACa,MAAV,CAAiBI,cAAjB,CAAT,EAA2CF,OAA3C,CAA1B;IACA,OAAO;MAAEJ,OAAF;MAAWJ;IAAX,CAAP;EACH;;AAzBwC"},"metadata":{},"sourceType":"module"}