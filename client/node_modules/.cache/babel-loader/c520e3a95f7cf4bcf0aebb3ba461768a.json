{"ast":null,"code":"import { isCloudflareWorkers, isNodeJs } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport random from './random.js';\nexport async function generateSecret(alg, options) {\n  var _a;\n\n  let length;\n  let algorithm;\n  let keyUsages;\n\n  switch (alg) {\n    case 'HS256':\n    case 'HS384':\n    case 'HS512':\n      length = parseInt(alg.slice(-3), 10);\n      algorithm = {\n        name: 'HMAC',\n        hash: `SHA-${length}`,\n        length\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n\n    case 'A128CBC-HS256':\n    case 'A192CBC-HS384':\n    case 'A256CBC-HS512':\n      length = parseInt(alg.slice(-3), 10);\n      return random(new Uint8Array(length >> 3));\n\n    case 'A128KW':\n    case 'A192KW':\n    case 'A256KW':\n      length = parseInt(alg.slice(1, 4), 10);\n      algorithm = {\n        name: 'AES-KW',\n        length\n      };\n      keyUsages = ['wrapKey', 'unwrapKey'];\n      break;\n\n    case 'A128GCMKW':\n    case 'A192GCMKW':\n    case 'A256GCMKW':\n    case 'A128GCM':\n    case 'A192GCM':\n    case 'A256GCM':\n      length = parseInt(alg.slice(1, 4), 10);\n      algorithm = {\n        name: 'AES-GCM',\n        length\n      };\n      keyUsages = ['encrypt', 'decrypt'];\n      break;\n\n    default:\n      throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n  }\n\n  return crypto.subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n}\n\nfunction getModulusLengthOption(options) {\n  var _a;\n\n  const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;\n\n  if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n    throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n  }\n\n  return modulusLength;\n}\n\nexport async function generateKeyPair(alg, options) {\n  var _a, _b;\n\n  let algorithm;\n  let keyUsages;\n\n  switch (alg) {\n    case 'PS256':\n    case 'PS384':\n    case 'PS512':\n      algorithm = {\n        name: 'RSA-PSS',\n        hash: `SHA-${alg.slice(-3)}`,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        modulusLength: getModulusLengthOption(options)\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n\n    case 'RS256':\n    case 'RS384':\n    case 'RS512':\n      algorithm = {\n        name: 'RSASSA-PKCS1-v1_5',\n        hash: `SHA-${alg.slice(-3)}`,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        modulusLength: getModulusLengthOption(options)\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n\n    case 'RSA-OAEP':\n    case 'RSA-OAEP-256':\n    case 'RSA-OAEP-384':\n    case 'RSA-OAEP-512':\n      algorithm = {\n        name: 'RSA-OAEP',\n        hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n        publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n        modulusLength: getModulusLengthOption(options)\n      };\n      keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];\n      break;\n\n    case 'ES256':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-256'\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n\n    case 'ES384':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-384'\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n\n    case 'ES512':\n      algorithm = {\n        name: 'ECDSA',\n        namedCurve: 'P-521'\n      };\n      keyUsages = ['sign', 'verify'];\n      break;\n\n    case (isCloudflareWorkers() || isNodeJs()) && 'EdDSA':\n      switch (options === null || options === void 0 ? void 0 : options.crv) {\n        case undefined:\n        case 'Ed25519':\n          algorithm = {\n            name: 'NODE-ED25519',\n            namedCurve: 'NODE-ED25519'\n          };\n          keyUsages = ['sign', 'verify'];\n          break;\n\n        case isNodeJs() && 'Ed448':\n          algorithm = {\n            name: 'NODE-ED448',\n            namedCurve: 'NODE-ED448'\n          };\n          keyUsages = ['sign', 'verify'];\n          break;\n\n        default:\n          throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are Ed25519 and Ed448');\n      }\n\n      break;\n\n    case 'ECDH-ES':\n    case 'ECDH-ES+A128KW':\n    case 'ECDH-ES+A192KW':\n    case 'ECDH-ES+A256KW':\n      algorithm = {\n        name: 'ECDH',\n        namedCurve: (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'P-256'\n      };\n      keyUsages = ['deriveKey', 'deriveBits'];\n      break;\n\n    default:\n      throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n  }\n\n  return crypto.subtle.generateKey(algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages);\n}","map":{"version":3,"names":["isCloudflareWorkers","isNodeJs","crypto","JOSENotSupported","random","generateSecret","alg","options","_a","length","algorithm","keyUsages","parseInt","slice","name","hash","Uint8Array","subtle","generateKey","extractable","getModulusLengthOption","modulusLength","generateKeyPair","_b","publicExponent","namedCurve","crv","undefined"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/runtime/generate.js"],"sourcesContent":["import { isCloudflareWorkers, isNodeJs } from './env.js';\nimport crypto from './webcrypto.js';\nimport { JOSENotSupported } from '../util/errors.js';\nimport random from './random.js';\nexport async function generateSecret(alg, options) {\n    var _a;\n    let length;\n    let algorithm;\n    let keyUsages;\n    switch (alg) {\n        case 'HS256':\n        case 'HS384':\n        case 'HS512':\n            length = parseInt(alg.slice(-3), 10);\n            algorithm = { name: 'HMAC', hash: `SHA-${length}`, length };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'A128CBC-HS256':\n        case 'A192CBC-HS384':\n        case 'A256CBC-HS512':\n            length = parseInt(alg.slice(-3), 10);\n            return random(new Uint8Array(length >> 3));\n        case 'A128KW':\n        case 'A192KW':\n        case 'A256KW':\n            length = parseInt(alg.slice(1, 4), 10);\n            algorithm = { name: 'AES-KW', length };\n            keyUsages = ['wrapKey', 'unwrapKey'];\n            break;\n        case 'A128GCMKW':\n        case 'A192GCMKW':\n        case 'A256GCMKW':\n        case 'A128GCM':\n        case 'A192GCM':\n        case 'A256GCM':\n            length = parseInt(alg.slice(1, 4), 10);\n            algorithm = { name: 'AES-GCM', length };\n            keyUsages = ['encrypt', 'decrypt'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return crypto.subtle.generateKey(algorithm, (_a = options === null || options === void 0 ? void 0 : options.extractable) !== null && _a !== void 0 ? _a : false, keyUsages);\n}\nfunction getModulusLengthOption(options) {\n    var _a;\n    const modulusLength = (_a = options === null || options === void 0 ? void 0 : options.modulusLength) !== null && _a !== void 0 ? _a : 2048;\n    if (typeof modulusLength !== 'number' || modulusLength < 2048) {\n        throw new JOSENotSupported('Invalid or unsupported modulusLength option provided, 2048 bits or larger keys must be used');\n    }\n    return modulusLength;\n}\nexport async function generateKeyPair(alg, options) {\n    var _a, _b;\n    let algorithm;\n    let keyUsages;\n    switch (alg) {\n        case 'PS256':\n        case 'PS384':\n        case 'PS512':\n            algorithm = {\n                name: 'RSA-PSS',\n                hash: `SHA-${alg.slice(-3)}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'RS256':\n        case 'RS384':\n        case 'RS512':\n            algorithm = {\n                name: 'RSASSA-PKCS1-v1_5',\n                hash: `SHA-${alg.slice(-3)}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'RSA-OAEP':\n        case 'RSA-OAEP-256':\n        case 'RSA-OAEP-384':\n        case 'RSA-OAEP-512':\n            algorithm = {\n                name: 'RSA-OAEP',\n                hash: `SHA-${parseInt(alg.slice(-3), 10) || 1}`,\n                publicExponent: new Uint8Array([0x01, 0x00, 0x01]),\n                modulusLength: getModulusLengthOption(options),\n            };\n            keyUsages = ['decrypt', 'unwrapKey', 'encrypt', 'wrapKey'];\n            break;\n        case 'ES256':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-256' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'ES384':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-384' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case 'ES512':\n            algorithm = { name: 'ECDSA', namedCurve: 'P-521' };\n            keyUsages = ['sign', 'verify'];\n            break;\n        case (isCloudflareWorkers() || isNodeJs()) && 'EdDSA':\n            switch (options === null || options === void 0 ? void 0 : options.crv) {\n                case undefined:\n                case 'Ed25519':\n                    algorithm = { name: 'NODE-ED25519', namedCurve: 'NODE-ED25519' };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                case isNodeJs() && 'Ed448':\n                    algorithm = { name: 'NODE-ED448', namedCurve: 'NODE-ED448' };\n                    keyUsages = ['sign', 'verify'];\n                    break;\n                default:\n                    throw new JOSENotSupported('Invalid or unsupported crv option provided, supported values are Ed25519 and Ed448');\n            }\n            break;\n        case 'ECDH-ES':\n        case 'ECDH-ES+A128KW':\n        case 'ECDH-ES+A192KW':\n        case 'ECDH-ES+A256KW':\n            algorithm = { name: 'ECDH', namedCurve: (_a = options === null || options === void 0 ? void 0 : options.crv) !== null && _a !== void 0 ? _a : 'P-256' };\n            keyUsages = ['deriveKey', 'deriveBits'];\n            break;\n        default:\n            throw new JOSENotSupported('Invalid or unsupported JWK \"alg\" (Algorithm) Parameter value');\n    }\n    return (crypto.subtle.generateKey(algorithm, (_b = options === null || options === void 0 ? void 0 : options.extractable) !== null && _b !== void 0 ? _b : false, keyUsages));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}