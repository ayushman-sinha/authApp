{"ast":null,"code":"import { decode as base64url } from './base64url.js';\nimport { decoder } from '../lib/buffer_utils.js';\nimport isObject from '../lib/is_object.js';\nimport { JWTInvalid } from './errors.js';\nexport function decodeJwt(jwt) {\n  if (typeof jwt !== 'string') throw new JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');\n  const {\n    1: payload,\n    length\n  } = jwt.split('.');\n  if (length === 5) throw new JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');\n  if (length !== 3) throw new JWTInvalid('Invalid JWT');\n  if (!payload) throw new JWTInvalid('JWTs must contain a payload');\n  let decoded;\n\n  try {\n    decoded = base64url(payload);\n  } catch (_a) {\n    throw new JWTInvalid('Failed to parse the base64url encoded payload');\n  }\n\n  let result;\n\n  try {\n    result = JSON.parse(decoder.decode(decoded));\n  } catch (_b) {\n    throw new JWTInvalid('Failed to parse the decoded payload as JSON');\n  }\n\n  if (!isObject(result)) throw new JWTInvalid('Invalid JWT Claims Set');\n  return result;\n}","map":{"version":3,"names":["decode","base64url","decoder","isObject","JWTInvalid","decodeJwt","jwt","payload","length","split","decoded","_a","result","JSON","parse","_b"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/util/decode_jwt.js"],"sourcesContent":["import { decode as base64url } from './base64url.js';\nimport { decoder } from '../lib/buffer_utils.js';\nimport isObject from '../lib/is_object.js';\nimport { JWTInvalid } from './errors.js';\nexport function decodeJwt(jwt) {\n    if (typeof jwt !== 'string')\n        throw new JWTInvalid('JWTs must use Compact JWS serialization, JWT must be a string');\n    const { 1: payload, length } = jwt.split('.');\n    if (length === 5)\n        throw new JWTInvalid('Only JWTs using Compact JWS serialization can be decoded');\n    if (length !== 3)\n        throw new JWTInvalid('Invalid JWT');\n    if (!payload)\n        throw new JWTInvalid('JWTs must contain a payload');\n    let decoded;\n    try {\n        decoded = base64url(payload);\n    }\n    catch (_a) {\n        throw new JWTInvalid('Failed to parse the base64url encoded payload');\n    }\n    let result;\n    try {\n        result = JSON.parse(decoder.decode(decoded));\n    }\n    catch (_b) {\n        throw new JWTInvalid('Failed to parse the decoded payload as JSON');\n    }\n    if (!isObject(result))\n        throw new JWTInvalid('Invalid JWT Claims Set');\n    return result;\n}\n"],"mappings":"AAAA,SAASA,MAAM,IAAIC,SAAnB,QAAoC,gBAApC;AACA,SAASC,OAAT,QAAwB,wBAAxB;AACA,OAAOC,QAAP,MAAqB,qBAArB;AACA,SAASC,UAAT,QAA2B,aAA3B;AACA,OAAO,SAASC,SAAT,CAAmBC,GAAnB,EAAwB;EAC3B,IAAI,OAAOA,GAAP,KAAe,QAAnB,EACI,MAAM,IAAIF,UAAJ,CAAe,+DAAf,CAAN;EACJ,MAAM;IAAE,GAAGG,OAAL;IAAcC;EAAd,IAAyBF,GAAG,CAACG,KAAJ,CAAU,GAAV,CAA/B;EACA,IAAID,MAAM,KAAK,CAAf,EACI,MAAM,IAAIJ,UAAJ,CAAe,0DAAf,CAAN;EACJ,IAAII,MAAM,KAAK,CAAf,EACI,MAAM,IAAIJ,UAAJ,CAAe,aAAf,CAAN;EACJ,IAAI,CAACG,OAAL,EACI,MAAM,IAAIH,UAAJ,CAAe,6BAAf,CAAN;EACJ,IAAIM,OAAJ;;EACA,IAAI;IACAA,OAAO,GAAGT,SAAS,CAACM,OAAD,CAAnB;EACH,CAFD,CAGA,OAAOI,EAAP,EAAW;IACP,MAAM,IAAIP,UAAJ,CAAe,+CAAf,CAAN;EACH;;EACD,IAAIQ,MAAJ;;EACA,IAAI;IACAA,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWZ,OAAO,CAACF,MAAR,CAAeU,OAAf,CAAX,CAAT;EACH,CAFD,CAGA,OAAOK,EAAP,EAAW;IACP,MAAM,IAAIX,UAAJ,CAAe,6CAAf,CAAN;EACH;;EACD,IAAI,CAACD,QAAQ,CAACS,MAAD,CAAb,EACI,MAAM,IAAIR,UAAJ,CAAe,wBAAf,CAAN;EACJ,OAAOQ,MAAP;AACH"},"metadata":{},"sourceType":"module"}