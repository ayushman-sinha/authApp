{"ast":null,"code":"import invalidKeyInput from './invalid_key_input.js';\nimport isKeyLike, { types } from '../runtime/is_key_like.js';\n\nconst symmetricTypeCheck = key => {\n  if (key instanceof Uint8Array) return;\n\n  if (!isKeyLike(key)) {\n    throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n  }\n\n  if (key.type !== 'secret') {\n    throw new TypeError(`${types.join(' or ')} instances for symmetric algorithms must be of type \"secret\"`);\n  }\n};\n\nconst asymmetricTypeCheck = (key, usage) => {\n  if (!isKeyLike(key)) {\n    throw new TypeError(invalidKeyInput(key, ...types));\n  }\n\n  if (key.type === 'secret') {\n    throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithms must not be of type \"secret\"`);\n  }\n\n  if (usage === 'sign' && key.type === 'public') {\n    throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm signing must be of type \"private\"`);\n  }\n\n  if (usage === 'decrypt' && key.type === 'public') {\n    throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm decryption must be of type \"private\"`);\n  }\n\n  if (key.algorithm && usage === 'verify' && key.type === 'private') {\n    throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm verifying must be of type \"public\"`);\n  }\n\n  if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n    throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm encryption must be of type \"public\"`);\n  }\n};\n\nconst checkKeyType = (alg, key, usage) => {\n  const symmetric = alg.startsWith('HS') || alg === 'dir' || alg.startsWith('PBES2') || /^A\\d{3}(?:GCM)?KW$/.test(alg);\n\n  if (symmetric) {\n    symmetricTypeCheck(key);\n  } else {\n    asymmetricTypeCheck(key, usage);\n  }\n};\n\nexport default checkKeyType;","map":{"version":3,"names":["invalidKeyInput","isKeyLike","types","symmetricTypeCheck","key","Uint8Array","TypeError","type","join","asymmetricTypeCheck","usage","algorithm","checkKeyType","alg","symmetric","startsWith","test"],"sources":["D:/React/authApp/client/node_modules/jose/dist/browser/lib/check_key_type.js"],"sourcesContent":["import invalidKeyInput from './invalid_key_input.js';\nimport isKeyLike, { types } from '../runtime/is_key_like.js';\nconst symmetricTypeCheck = (key) => {\n    if (key instanceof Uint8Array)\n        return;\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types, 'Uint8Array'));\n    }\n    if (key.type !== 'secret') {\n        throw new TypeError(`${types.join(' or ')} instances for symmetric algorithms must be of type \"secret\"`);\n    }\n};\nconst asymmetricTypeCheck = (key, usage) => {\n    if (!isKeyLike(key)) {\n        throw new TypeError(invalidKeyInput(key, ...types));\n    }\n    if (key.type === 'secret') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithms must not be of type \"secret\"`);\n    }\n    if (usage === 'sign' && key.type === 'public') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm signing must be of type \"private\"`);\n    }\n    if (usage === 'decrypt' && key.type === 'public') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm decryption must be of type \"private\"`);\n    }\n    if (key.algorithm && usage === 'verify' && key.type === 'private') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm verifying must be of type \"public\"`);\n    }\n    if (key.algorithm && usage === 'encrypt' && key.type === 'private') {\n        throw new TypeError(`${types.join(' or ')} instances for asymmetric algorithm encryption must be of type \"public\"`);\n    }\n};\nconst checkKeyType = (alg, key, usage) => {\n    const symmetric = alg.startsWith('HS') ||\n        alg === 'dir' ||\n        alg.startsWith('PBES2') ||\n        /^A\\d{3}(?:GCM)?KW$/.test(alg);\n    if (symmetric) {\n        symmetricTypeCheck(key);\n    }\n    else {\n        asymmetricTypeCheck(key, usage);\n    }\n};\nexport default checkKeyType;\n"],"mappings":"AAAA,OAAOA,eAAP,MAA4B,wBAA5B;AACA,OAAOC,SAAP,IAAoBC,KAApB,QAAiC,2BAAjC;;AACA,MAAMC,kBAAkB,GAAIC,GAAD,IAAS;EAChC,IAAIA,GAAG,YAAYC,UAAnB,EACI;;EACJ,IAAI,CAACJ,SAAS,CAACG,GAAD,CAAd,EAAqB;IACjB,MAAM,IAAIE,SAAJ,CAAcN,eAAe,CAACI,GAAD,EAAM,GAAGF,KAAT,EAAgB,YAAhB,CAA7B,CAAN;EACH;;EACD,IAAIE,GAAG,CAACG,IAAJ,KAAa,QAAjB,EAA2B;IACvB,MAAM,IAAID,SAAJ,CAAe,GAAEJ,KAAK,CAACM,IAAN,CAAW,MAAX,CAAmB,8DAApC,CAAN;EACH;AACJ,CATD;;AAUA,MAAMC,mBAAmB,GAAG,CAACL,GAAD,EAAMM,KAAN,KAAgB;EACxC,IAAI,CAACT,SAAS,CAACG,GAAD,CAAd,EAAqB;IACjB,MAAM,IAAIE,SAAJ,CAAcN,eAAe,CAACI,GAAD,EAAM,GAAGF,KAAT,CAA7B,CAAN;EACH;;EACD,IAAIE,GAAG,CAACG,IAAJ,KAAa,QAAjB,EAA2B;IACvB,MAAM,IAAID,SAAJ,CAAe,GAAEJ,KAAK,CAACM,IAAN,CAAW,MAAX,CAAmB,mEAApC,CAAN;EACH;;EACD,IAAIE,KAAK,KAAK,MAAV,IAAoBN,GAAG,CAACG,IAAJ,KAAa,QAArC,EAA+C;IAC3C,MAAM,IAAID,SAAJ,CAAe,GAAEJ,KAAK,CAACM,IAAN,CAAW,MAAX,CAAmB,uEAApC,CAAN;EACH;;EACD,IAAIE,KAAK,KAAK,SAAV,IAAuBN,GAAG,CAACG,IAAJ,KAAa,QAAxC,EAAkD;IAC9C,MAAM,IAAID,SAAJ,CAAe,GAAEJ,KAAK,CAACM,IAAN,CAAW,MAAX,CAAmB,0EAApC,CAAN;EACH;;EACD,IAAIJ,GAAG,CAACO,SAAJ,IAAiBD,KAAK,KAAK,QAA3B,IAAuCN,GAAG,CAACG,IAAJ,KAAa,SAAxD,EAAmE;IAC/D,MAAM,IAAID,SAAJ,CAAe,GAAEJ,KAAK,CAACM,IAAN,CAAW,MAAX,CAAmB,wEAApC,CAAN;EACH;;EACD,IAAIJ,GAAG,CAACO,SAAJ,IAAiBD,KAAK,KAAK,SAA3B,IAAwCN,GAAG,CAACG,IAAJ,KAAa,SAAzD,EAAoE;IAChE,MAAM,IAAID,SAAJ,CAAe,GAAEJ,KAAK,CAACM,IAAN,CAAW,MAAX,CAAmB,yEAApC,CAAN;EACH;AACJ,CAnBD;;AAoBA,MAAMI,YAAY,GAAG,CAACC,GAAD,EAAMT,GAAN,EAAWM,KAAX,KAAqB;EACtC,MAAMI,SAAS,GAAGD,GAAG,CAACE,UAAJ,CAAe,IAAf,KACdF,GAAG,KAAK,KADM,IAEdA,GAAG,CAACE,UAAJ,CAAe,OAAf,CAFc,IAGd,qBAAqBC,IAArB,CAA0BH,GAA1B,CAHJ;;EAIA,IAAIC,SAAJ,EAAe;IACXX,kBAAkB,CAACC,GAAD,CAAlB;EACH,CAFD,MAGK;IACDK,mBAAmB,CAACL,GAAD,EAAMM,KAAN,CAAnB;EACH;AACJ,CAXD;;AAYA,eAAeE,YAAf"},"metadata":{},"sourceType":"module"}